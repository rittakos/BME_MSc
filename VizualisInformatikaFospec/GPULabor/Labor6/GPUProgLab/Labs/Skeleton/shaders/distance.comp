#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer positionTempBuffer
{
	vec4 positionTemp[];
};

layout(std430, binding = 2) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const float constraintWeight = 0.1f;

void main()
{
	int x = int(gl_GlobalInvocationID.x);
	int y = int(gl_GlobalInvocationID.y);
	uint gid = x * 64 + y;


	for (int i = -1; i <= 1; ++i)
	{
		for (int j = -1; j <= 1; ++j)
		{
			if (i == 0 && j == 0) 
				continue;
			if (x + i < 0 || x + i > 63 || y + j < 0 || y + j > 63) 
				continue;
			
			vec4 p1 = positionTemp[gid];
			vec4 p2 = positionTemp[(x + i) * 64 + (y + j)];

			float d = (i == 0 || j == 0) ? (1.0f / 63) : (1.41 * 1.0f / 63);

			vec4 dp1 = (p2 - p1) / distance(p1, p2) * (distance(p1, p2) - d) * constraintWeight;

			positionTemp[gid] += dp1;
		}
	}
}
