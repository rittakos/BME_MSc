#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

uniform vec3 center;

const float dt = 0.0000001;
const float e = 0.1;
float G = 10.0;
float M = 50000.0;
float m = 1.0;


void main()
{
	int i = 0;
	uint gid = gl_GlobalInvocationID.x;

	vec3 pos = position[gid].xyz;
	vec3 vel = velocity[gid].xyz;

	vec3 f = vec3(0);
	vec3 a = vec3(0);

	for(int idx = 0; idx < 1024; ++idx)
	{
		if(idx == gid)
			continue;
		float d = distance(pos, position[idx].xyz);
		vec3 r = position[idx].xyz - pos;
		a += G * m * r/pow((d * d + e * e), 1.5);
	}
	
	float d = distance(pos, center);
	vec3 r = center - pos;
	a += G * M * r / pow((d * d + e * e), 1.5);
	
	f = m * a;

	vel += a * dt;
	vec3 npos = pos + vel * dt;

	if(npos.x < -1.0 || npos.x > 1.0) vel.x = -vel.x;
	if(npos.y < -1.0 || npos.y > 1.0) vel.y = -vel.y;
	if(npos.z < -1.0 || npos.z > 1.0) vel.z = -vel.z;

	position[gid].xyz = npos;
	velocity[gid].xyz = vel;
}