#version 430

layout(vertices = 4) out;

in vec3 tPosition[];
out vec3 tcPosition[];

uniform int tessLevelInner;
uniform int tessLevelOuter;
uniform vec3 cursorPosition;

void main()
{
	tcPosition[gl_InvocationID] = tPosition[gl_InvocationID];
	if(gl_InvocationID == 0)
	{
		gl_TessLevelOuter[0] = tessLevelOuter + 1 / distance(tcPosition[gl_InvocationID], cursorPosition);
		gl_TessLevelOuter[1] = tessLevelOuter + 1 / distance(tcPosition[gl_InvocationID], cursorPosition);
		gl_TessLevelOuter[2] = tessLevelOuter + 1 / distance(tcPosition[gl_InvocationID], cursorPosition);
		gl_TessLevelOuter[3] = tessLevelOuter + 1 / distance(tcPosition[gl_InvocationID], cursorPosition);

		gl_TessLevelInner[0] = tessLevelInner + (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] + gl_TessLevelOuter[3]) / 4.0f;
		gl_TessLevelInner[1] = tessLevelInner + (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2] + gl_TessLevelOuter[3]) / 4.0f;;
	}
}